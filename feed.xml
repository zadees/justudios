<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Justudios</title>
    <link href="https://justudios.com/feed.xml" rel="self" />
    <link href="https://justudios.com" />
    <updated>2022-12-08T08:36:47-06:00</updated>
    <author>
        <name>Haeglo</name>
    </author>
    <id>https://justudios.com</id>

    <entry>
        <title>Strings</title>
        <author>
            <name>Haeglo</name>
        </author>
        <link href="https://justudios.com/strings.html"/>
        <id>https://justudios.com/strings.html</id>
        <media:content url="https://justudios.com/media/posts/18/javascript-code-header.jpg" medium="image" />
            <category term="Javascript"/>
            <category term="JavaScript Knowledge Base"/>

        <updated>2022-12-08T08:36:47-06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://justudios.com/media/posts/18/javascript-code-header.jpg" alt="" />
                    In JavaScript, a string is a sequence of characters enclosed in single or double quotes. For example, you could create a string like this: let myString = "Hello, world!"; Once you have a string, you can use various methods and properties to manipulate it. For&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://justudios.com/media/posts/18/javascript-code-header.jpg" class="type:primaryImage" alt="" /></p>
                <p>In JavaScript, a string is a sequence of characters enclosed in single or double quotes. For example, you could create a string like this:</p>
<pre class="line-numbers"><code class="language-js">let myString = "Hello, world!";</code></pre>
<p>Once you have a string, you can use various methods and properties to manipulate it. For example, you can use the <code>length</code> property to find out how many characters are in a string:</p>
<pre class="line-numbers"><code class="language-js">let myString = "Hello, world!";
console.log(myString.length); // This will output 13</code></pre>
<p>There are a number of methods available on the String object that allow you to manipulate strings in various ways. Some of the most commonly used string methods are:</p>
<ul>
<li><code>charAt()</code>: This method returns the character at a specific index in a string.</li>
<li><code>concat()</code>: This method concatenates (joins) two or more strings together.</li>
<li><code>indexOf()</code>: This method returns the index of the first occurrence of a specified substring within a string.</li>
<li><code>lastIndexOf()</code>: This method returns the index of the last occurrence of a specified substring within a string.</li>
<li><code>replace()</code>: This method replaces a specified substring with another substring.</li>
<li><code>slice()</code>: This method extracts a part of a string and returns a new string.</li>
<li><code>split()</code>: This method splits a string into an array of substrings based on a specified separator.</li>
<li><code>toLowerCase()</code>: This method converts a string to lowercase letters.</li>
<li><code>toUpperCase()</code>: This method converts a string to uppercase letters.</li>
</ul>
<pre class="line-numbers"><code class="language-js">// charAt() example
const str = "Hello, world!";
console.log(str.charAt(0));  // Output: "H"

// concat() example
const str1 = "Hello, ";
const str2 = "world!";
console.log(str1.concat(str2));  // Output: "Hello, world!"

// indexOf() example
const str = "Hello, world!";
console.log(str.indexOf("world"));  // Output: 7

// lastIndexOf() example
const str = "Hello, world! Hello, world!";
console.log(str.lastIndexOf("world"));  // Output: 18

// replace() example
const str = "Hello, world!";
console.log(str.replace("world", "there"));  // Output: "Hello, there!"

// slice() example
const str = "Hello, world!";
console.log(str.slice(7, 12));  // Output: "world"

// split() example
const str = "Hello, world!";
console.log(str.split(" "));  // Output: ["Hello,", "world!"]

// toLowerCase() example
const str = "Hello, world!";
console.log(str.toLowerCase());  // Output: "hello, world!"

// toUpperCase() example
const str = "Hello, world!";
console.log(str.toUpperCase());  // Output: "HELLO, WORLD!"

    </code></pre>
<p>These are just some of the most commonly used string methods in JavaScript. There are many other useful string methods available, and you can learn more about them by reading the documentation or checking out other <a href="https://www.w3schools.com/js/js_string_methods.asp" target="_blank" rel="nofollow noopener noreferrer">tutorials online</a>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Functions</title>
        <author>
            <name>Haeglo</name>
        </author>
        <link href="https://justudios.com/functions.html"/>
        <id>https://justudios.com/functions.html</id>
        <media:content url="https://justudios.com/media/posts/17/javascript-code-header.jpg" medium="image" />
            <category term="Javascript"/>
            <category term="JavaScript Knowledge Base"/>

        <updated>2022-12-07T16:21:49-06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://justudios.com/media/posts/17/javascript-code-header.jpg" alt="" />
                    Functions are a powerful and versatile feature of JavaScript that allow you to write modular and reusable code. A function is a block of code that can be called by other parts of your program. Functions allow you to define a reusable piece of code&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://justudios.com/media/posts/17/javascript-code-header.jpg" class="type:primaryImage" alt="" /></p>
                <p>Functions are a powerful and versatile feature of JavaScript that allow you to write modular and reusable code. A function is a block of code that can be called by other parts of your program. Functions allow you to define a reusable piece of code that can be executed whenever you need to perform a specific task. Inside the function, you can include any code that you want to be executed when the function is called. For example, in the code below we take two strings and concatenate them together with a space between them. These two strings that are passed into the function are called parameters and are often referred to as params. In the example below, we named the parameters param1, and param2. </p>
<pre class="line-numbers"><code class="language-js">const myFunction = (param1, param2) =&gt; {
  return `${param1} ${param2}`;
}

console.log(myFunction('Hello','World')); // Outputs "Hello World"
console.log(myFunction('John','Smith')); // Outputs "John Smith"    
</code></pre>
<p>A function has a <code>return</code> statement that will cause the function to stop executing. So any code you place after a return function will never execute. When a function is called the return statement will send back any values. In the example above you will see the return printed out to the console.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Arrays</title>
        <author>
            <name>Haeglo</name>
        </author>
        <link href="https://justudios.com/arrays.html"/>
        <id>https://justudios.com/arrays.html</id>
        <media:content url="https://justudios.com/media/posts/16/javascript-code-header.jpg" medium="image" />
            <category term="Javascript"/>
            <category term="JavaScript Knowledge Base"/>

        <updated>2022-12-07T16:09:36-06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://justudios.com/media/posts/16/javascript-code-header.jpg" alt="" />
                    In JavaScript, an array is a data type that is used to store a collection of elements. Each element in the array can be accessed by a numeric index, which is a number that represents the position of the element in the array. For example,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://justudios.com/media/posts/16/javascript-code-header.jpg" class="type:primaryImage" alt="" /></p>
                <p>In JavaScript, an array is a data type that is used to store a collection of elements. Each element in the array can be accessed by a numeric index, which is a number that represents the position of the element in the array. For example, the first element in the array is at index 0, the second element is at index 1, and so on.</p>
<p>Arrays in JavaScript are a powerful tool for storing and manipulating data, and they are a fundamental part of the language. You can use arrays to store any data type, including numbers, strings, objects, and even other arrays.</p>
<p>Here is an example of how you might create an array in JavaScript:</p>
<pre class="line-items"><code class="language-js">const myArray = []; // defines an empty array
// adds the text John to the first value of an array
myArray[0] = 'John';
console.log(myArray); // Outputs ["John"]

// adds the text Smith to the end of the array
myArray.push('Smith'); 
console.log(myArray); // Outputs ["John","Smith"]

// adds the text Bella to the end of the array
myArray.push('Bella');
console.log(myArray); // Outputs ["John","Smith","Bella"]

// Sort the array ascending order
console.log(myArray.sort()); // Outputs ["Bella","John","Smith"]

// Reverse the order of the array
console.log(myArray.reverse()); // Outputs ["Smith","John","Bella"]

// View the length of the array (number of items)
console.log(myArray.length) // Outputs 3
</code></pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>For Loop</title>
        <author>
            <name>Haeglo</name>
        </author>
        <link href="https://justudios.com/javascript-for-loop.html"/>
        <id>https://justudios.com/javascript-for-loop.html</id>
        <media:content url="https://justudios.com/media/posts/15/javascript-code-header.jpg" medium="image" />
            <category term="Javascript"/>
            <category term="JavaScript Knowledge Base"/>

        <updated>2022-12-07T15:52:18-06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://justudios.com/media/posts/15/javascript-code-header.jpg" alt="" />
                    The For Loop In JavaScript, the for loop is a control flow statement that allows you to execute a block of code a certain number of times. It consists of three parts: the loop initialization, the loop condition, and the loop iteration. The loop initialization&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://justudios.com/media/posts/15/javascript-code-header.jpg" class="type:primaryImage" alt="" /></p>
                <h3>The For Loop</h3>
<p>In JavaScript, the <code>for</code> loop is a control flow statement that allows you to execute a block of code a certain number of times. It consists of three parts: the loop initialization, the loop condition, and the loop iteration. The loop initialization is where you initialize the variables that will be used in the loop. The loop condition is a boolean expression that determines whether the loop will continue to run. If the condition is true, the code inside the loop will be executed, and then the iteration statement will be executed to update the state of the loop. The loop will continue to run as long as the condition remains true. Here is an example of a <code>for</code> loop in JavaScript:</p>
<pre class="line-numbers"><code class="language-js">for (var i = 0; i &lt; 5; i++) {
  console.log("Hello, world!");
}

// OUTPUT
// "Hello, world!"
// "Hello, world!"
// "Hello, world!"
// "Hello, world!"
// "Hello, world!"
</code></pre>
<p>In this example, the <code>for</code> loop will execute the code inside the loop 5 times, with the variable <code>i</code> starting at 0 and increasing by 1 each time the loop runs. On the first iteration, <code>i</code> will be 0, on the second iteration it will be 1, and so on. The loop will stop running when <code>i</code> reaches 5, because the loop condition (<code>i &lt; 5</code>) will be false.</p>
<h3>The For Of Loop</h3>
<p>In JavaScript, the <code>for of</code> loop that loops over iterable data structures like Arrays. In this example we will loop through an array of user objects. We'll show you the traditional <code>for</code> loop vs the <code>for of</code> loop.</p>
<h5>For Loop</h5>
<pre class="line-numbers"><code class="language-js">const users = [
  { name: 'John', age: 27 },
  { name: 'Sarah', age: 30 },
  { name: 'Maria', age: 43 }
];

// loop through the users and log out a message
for(let i = 0; i &lt; users.length; i++){
  const message = `User ${users[i].name} is ${users[i].age} years old.`;
  console.log(message);
}
    
// OUTPUT
// "User John is 27 years old."
// "User Sarah is 30 years old."
// "User Maria is 43 years old."</code></pre>
<h5>For Of Loop</h5>
<pre class="line-numbers"><code class="language-js">const users = [
  { name: 'John', age: 27 },
  { name: 'Sarah', age: 30 },
  { name: 'Maria', age: 43 }
];

// loop through the users and log out a message
for(let user of users){
  const message = `User ${user.name} is ${user.age} years old.`;
  console.log(message);
}
    
// OUTPUT
// "User John is 27 years old."
// "User Sarah is 30 years old."
// "User Maria is 43 years old."
</code></pre>
<p>While both of these loops do the same thing, the cleaner approach of the <code>for of</code> loop makes it cleaner when working with long blocks of code. Neither of these is wrong, so feel free to use whichever concept you feel best works for you.</p>
<h3>The For In Loop</h3>
<p>The <code>for in</code> loop is different in that it loops through the properties of an Object instead of items in an iterable data structure. We'll do our same example as above and when building our message we'll use the <code>for in</code> loop to loop through the user object.</p>
<pre class="line-numbers"><code class="language-js">const user = { name: 'John', age: 27, job: 'Janitor' };

// loop through the users and log out a message
for(let x in user){
  const message = `${x} - ${user[x]}`;
  console.log(message);
}
    
// OUTPUT
// "name - John"
// "age - 27"
// "job - Janitor"
</code></pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>JavaScript Tutorial #5 - A Simple ToDo List</title>
        <author>
            <name>Haeglo</name>
        </author>
        <link href="https://justudios.com/javascript-tutorial-5-a-simple-todo-list.html"/>
        <id>https://justudios.com/javascript-tutorial-5-a-simple-todo-list.html</id>
        <media:content url="https://justudios.com/media/posts/14/javascript-code-header.jpg" medium="image" />
            <category term="Javascript"/>
            <category term="JavaScript Tutorials"/>

        <updated>2022-12-07T16:11:29-06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://justudios.com/media/posts/14/javascript-code-header.jpg" alt="" />
                    What We Cover Query Selector Events For Loops (learn more) Arrays (learn more) Functions In this tutorial we'll build a simple To-Do list. Once you've done a task on your list, simply click the task and watch it disappear. This is a fun little exercise&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://justudios.com/media/posts/14/javascript-code-header.jpg" class="type:primaryImage" alt="" /></p>
                <h3>What We Cover</h3>
<ol>
<li>Query Selector</li>
<li>Events</li>
<li>For Loops (<a href="https://justudios.com/javascript-for-loop.html" title="JavaScript For Loops">learn more</a>)</li>
<li>Arrays (<a href="https://justudios.com/arrays.html" title="JavaScript Arrays">learn more</a>)</li>
<li>Functions</li>
</ol>
<p>In this tutorial we'll build a simple To-Do list. Once you've done a task on your list, simply click the task and watch it disappear. This is a fun little exercise that you can customize to do a lot more than just be a simple list. This will give you practice with creating functions, using arrays, and running a for loop. </p>
<p> </p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-theme-id="dark" data-default-tab="result" data-slug-hash="VwdgqYw" data-editable="true" data-user="zadees">See the Pen <a href="https://codepen.io/zadees/pen/VwdgqYw"> Untitled</a> by Justin (<a href="https://codepen.io/zadees">@zadees</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<p>
<script async="" src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
</p>
<h4>HTML</h4>
<pre class="line-numbers"><code class="language-html">&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;My To-Do List&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;My To-Do List&lt;/h1&gt;
    &lt;form id="form"&gt;
      &lt;input type="text" id="input" placeholder="Enter something to do"&gt;
      &lt;button type="submit"&gt;Add&lt;/button&gt;
    &lt;/form&gt;
    &lt;ul id="list"&gt;&lt;/ul&gt;
  &lt;/body&gt;
&lt;/html&gt; </code></pre>
<h4>JavaScript</h4>
<pre class="line-numbers"><code class="language-js">// Get a reference to the form and input elements
const form = document.querySelector("#form");
const input = document.querySelector("#input");
let todos = []; // create an empty array to store our todos
let listItems = []; // HTML list items for our list
    
const addItem = (item) =&gt; {    
  if(item){
      listItems += `&lt;li class="task" id="${todos.length}"&gt;${item}&lt;/li&gt;`;
  }   
}

const updateList = () =&gt; {
  listItems = "";
  for(item of todos){
    listItems += `&lt;li class="task" id="${todos.length}"&gt;${item}&lt;/li&gt;`;   
  }
    
  // Add the new items to the list
  document.getElementById("list").innerHTML = listItems;
}
    
// Remove a task from the to-do list
const removeTask = (id, item) =&gt; {
  // create a new array
  const newList = [];
  
  // loop through the todos and only add tasks that weren't removed to the new array
  for(task of todos) {
    if(task != item){
      newList.push(task);
    }
  }
  
  todos = newList; // assign the new list to the todos
  updateList();
}
    
const list = document.querySelector('ul');
    
// Listen for the clicks on the todo list
list.addEventListener("click", (event) =&gt; {  
  removeTask(event.target.id, event.target.innerText);
});
   
// Listen for the form's submit event
form.addEventListener("submit", (event) =&gt; {
  // Prevent the default form submission behavior and keep the page from reloading
  event.preventDefault();
    
  // Get the value of the input field
  const item = input.value;
    
  // Create a new list item
  todos.push(item);
    
  // Updates the list items
  addItem(item);
    
  // Add the new item to the list
  document.getElementById("list").innerHTML = listItems;
  
  // Clear the input field
  input.value = "";
});
</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>JavaScript Tutorial #4 - A Simple Calculator</title>
        <author>
            <name>Haeglo</name>
        </author>
        <link href="https://justudios.com/javascript-tutorial-4-a-simple-calculator.html"/>
        <id>https://justudios.com/javascript-tutorial-4-a-simple-calculator.html</id>
        <media:content url="https://justudios.com/media/posts/13/javascript-code-header.jpg" medium="image" />
            <category term="Javascript"/>
            <category term="JavaScript Tutorials"/>

        <updated>2022-12-07T15:52:37-06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://justudios.com/media/posts/13/javascript-code-header.jpg" alt="JavaScript Tutorial" />
                    What We Cover Math Operations Event Listeners Variables Functions Here's a simple JavaScript calculator app that allows the user to perform basic mathematical operations such as addition, subtraction, multiplication, and division. Below is the full code that we are planning on using. This will give&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://justudios.com/media/posts/13/javascript-code-header.jpg" class="type:primaryImage" alt="JavaScript Tutorial" /></p>
                <h3>What We Cover</h3>
<ol>
<li>Math Operations</li>
<li>Event Listeners</li>
<li>Variables</li>
<li>Functions</li>
</ol>
<p>Here's a simple JavaScript calculator app that allows the user to perform basic mathematical operations such as addition, subtraction, multiplication, and division. Below is the full code that we are planning on using. This will give you an HTML form that you can use to build a GUI (Graphical User Interface) to interact with once the code is written.</p>
<p>The BEST way to learn to code is to find something you want to create and then break it down into simple tasks. A great idea here would be to just create the functions and test them out by calling them directly in the JavaScript code. Once you know they are working correctly, then move on to adding HTML code and getting a single button to work calling a function. After that you should be able to quickly get everything else to work. Once you learn to think about how to break things down into small components, then you will be able to really master coding. Learning syntax is useful, but it isn't a great way to learn a language. </p>
<h4>What We're Building</h4>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-theme-id="dark" data-default-tab="result" data-slug-hash="WNyPagV" data-editable="true" data-user="zadees">See the Pen <a href="https://codepen.io/zadees/pen/WNyPagV"> JavaScript Tutorial #4 - A Simple Calculator</a> by Justin (<a href="https://codepen.io/zadees">@zadees</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<p>
<script async="" src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
</p>
<h4>HTML</h4>
<pre class="line-numbers"><code class="language-html">&lt;input type="text" id="operand1" /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;input type="text" id="operand2" /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;div&gt;Result: &lt;span id="result"&gt;&lt;/span&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;button id="add"&gt;Add&lt;/button&gt;
&lt;button id="subtract"&gt;Subtract&lt;/button&gt;
&lt;button id="multiply"&gt;Multiply&lt;/button&gt;
&lt;button id="divide"&gt;Divide&lt;/button&gt;
</code></pre>
<h4>JavaScript</h4>
<pre class="line-numbers"><code class="language-js">// Set our variables and get a reference to all of the HTML elements
const addButton = document.getElementById('add');
const divideButton = document.getElementById('divide');
const multiplyButton = document.getElementById('multiply');
const subtractButton = document.getElementById('subtract');
const result = document.getElementById('result');
const operand1 = document.getElementById('operand1');
const operand2 = document.getElementById('operand2');<br>
// Define a function to add two numbers
const add = (x, y) =&gt; {
  return +x + +y; 
}

// Define a function to subtract two numbers
const subtract = (x, y) =&gt; {
  return +x - +y;
}

// Define a function to multiply two numbers
const multiply = (x, y) =&gt; {
  return +x * +y;
}

// Define a function to divide two numbers
const divide = (x, y) =&gt; {
  return +x / +y;
}

// Listen for a click on the Add button
addButton.addEventListener("click", () =&gt; {
  result.innerHTML = add(operand1.value,operand2.value);
});

// Listen for a click on the Subtract button
subtractButton.addEventListener("click", () =&gt; {  
  result.innerHTML = subtract(operand1.value,operand2.value);
});

// Listen for a click on the Multiply button
multiplyButton.addEventListener("click", () =&gt; {  
  result.innerHTML = multiply(operand1.value,operand2.value).toFixed(2);
});

// Listen for a click on the Divide button
divideButton.addEventListener("click", () =&gt; {  
  result.innerHTML = divide(operand1.value,operand2.value).toFixed(2);
});</code></pre>
<p>Once we run this code we will get a simple calculator that takes two numbers and performs the operation on them. Let's review a few of the things here that you may not be aware of.</p>
<ul>
<li><strong>Comments - </strong>The <code>//</code> lines are ignored by JavaScript and are used for commenting a single line of code. If you would like to comment more than a single line the multi-line comment begins with <code>/*</code> and ends with <code>*/</code> . This will allow you to comment out as much code as you want.</li>
<li><strong>Functions - </strong>Functions are a powerful and versatile feature of JavaScript that allow you to write modular and reusable code. unction is a block of code that can be called by other parts of your program. Functions allow you to define a reusable piece of code that can be executed whenever you need to perform a specific task. Inside the function, you can include any code that you want to be executed when the function is called. For example, in the add function we defined a function that performs a mathematical operation on two numbers (x and y) and returns the result. These two numbers that are passed into the function are called parameters and are often referred to as params.</li>
<li><strong>Events - </strong>In this example we are using the <code>addEventListener </code>and specifically looking for the <code>click</code> event. Once a user clicks on that element, then we will call a function. In this case, there are no parameters so the function is noted as<code> () =&gt; { }</code> . This is the new ES6 way of using functions and replaces the old syntax of <code>function () { } </code>. </li>
<li><strong>toFixed - </strong>You'll notice in the multiplyButton and the divideButton eventListener functions, that we append a <code>.toFixed(2)</code> after the function calls. This takes the result that is given, and ensures that it will be no longer than 2 decimal places. Try dividing 5 by 3 without the <code>.toFixed(2)</code> to see the difference.</li>
<li><strong>What's with the '+' sign in front of x and y? - </strong>When doing math on variables you want to ensure that they are all numbers prior performing the mathematical action. The + in front of a variable lets JavaScript know to treat this as a number and not a text string. Try removing the +'s in front of the x and the y in the <code>add</code> function. Now when you add 3 and 5 instead of getting 8, you will get 35.  The reason is it looks at 3 and 5 as text and concatenates them together instead of actually adding them as numbers.</li>
</ul>
<p>Now you have a simple calculator. Can you think of something else that you could build using what you learned in this tutorial? The best way to learn is by finding projects to work on and attempting to code them. Tutorials are great to get you started, but you'll learn more with practice. So try to find ways to build something creative with what you have learned so far. You can do this!</p>
<p><a href="https://justudios.com/javascript-tutorial-5-a-simple-todo-list.html" title="JavaScript Tutorial - A Simple ToDo List">Next Lesson: JavaScript Tutorial #5 - A Simple ToDo List</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>JavaScript Tutorial #3 - Variables</title>
        <author>
            <name>Haeglo</name>
        </author>
        <link href="https://justudios.com/javascript-tutorial-3-variables.html"/>
        <id>https://justudios.com/javascript-tutorial-3-variables.html</id>
        <media:content url="https://justudios.com/media/posts/12/javascript-code-header.jpg" medium="image" />
            <category term="Javascript"/>
            <category term="JavaScript Tutorials"/>

        <updated>2022-12-07T15:52:43-06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://justudios.com/media/posts/12/javascript-code-header.jpg" alt="" />
                    What We Cover What is a variable? Naming A Variable When to use const, let, and var when declaring a variable What Is A Variable? In JavaScript, a variable is a named container that stores a value. Variables are used to store data that can&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://justudios.com/media/posts/12/javascript-code-header.jpg" class="type:primaryImage" alt="" /></p>
                <h3>What We Cover</h3>
<ol>
<li><a href="#variable">What is a variable?</a></li>
<li><a href="#naming">Naming A Variable</a></li>
<li><a href="#vartypes">When to use const, let, and var when declaring a variable</a></li>
</ol>
<h3 id="variable">What Is A Variable?</h3>
<p>In JavaScript, a variable is a named container that stores a value. Variables are used to store data that can be accessed and modified by different parts of your program.</p>
<p>To create a variable in JavaScript, you use the <code>var, const, or let</code> keyword followed by the variable name, like this:</p>
<pre class="line-numbers"><code class="language-js"><span class="hljs-keyword">var</span> myVariable;</code></pre>
<p>You can then assign a value to the variable using the <code>=</code> operator, like this:</p>
<pre class="line-numbers"><code class="language-js">myVariable = "Hello World";</code></pre>
<p>You can also declare the variable and assign it a value in a single step, like this:</p>
<pre class="line-numbers"><code class="language-js">var myVariable = "Hello World";</code></pre>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">To use a variable in your code, simply reference its name wherever you want to use its value. For example:</span></p>
<pre class="line-numbers"><code class="language-js">console.log(myVariable); // Outputs "Hello World"</code></pre>
<h3 id="naming">Naming A Variable</h3>
<p>When naming a variable it is important to choose a name that clearly defines the data you are storing. Let's say we are looking to store a user's name. We would want to define our variable like this <code>var userName = "John Smith";</code> This way, whenever you are referencing the variable, you will know what the variable is supposed to be representing.</p>
<p>Typically when writing in JavaScript we have a convention that we name variables starting with a lowercase letter.  Then each word after is capitalized. This is referred to as Camel Case.</p>
<p>An example of this would be a variable defining an user's first name. <code>var userFirstName = "John";</code></p>
<h3 id="vartypes">When To use const, let, and var When Declaring a Variable</h3>
<p><code>const</code>, <code>let</code>, and <code>var</code> are three different ways to declare variables. Each of these has its own specific characteristics and uses, so it's important to understand the differences between them.</p>
<h4><code>var</code></h4>
<p>The <code>var</code> keyword is the oldest dway to declare a variable in JavaScript. Variables declared with <code>var</code> are either function-scoped or global-scoped, depending on where they are declared. This means that a <code>var</code> variable is accessible from anywhere within the current function, or from anywhere in the global scope if it's declared outside of a function.</p>
<p>One of the key differences between <code>var</code> and the other two keywords is that <code>var</code> variables are <strong>hoisted</strong> to the top of the current scope. This means that you can reference a <code>var</code> variable before it's declared in your code and you can reference it outside of the function that it was defined in. For example:</p>
<pre class="line-numbers"><code class="language-js">if (true) {
  var myVar = "Hello World";
  console.log(myVar); // Outputs "Hello World"
}

console.log(myVar + '!'); // Outputs "Hello World!"</code><code class="language-js"></code></pre>
<h4><code>let</code></h4>
<p>The <code>let</code> keyword was introduced in the ES6 version of JavaScript, and it provides a new way to declare variables. Unlike <code>var</code> variables, <code>let</code> variables are <strong>block-scoped</strong>, which means that they are only accessible from within the block in which they are declared. For example:</p>
<pre class="line-numbers"><code class="language-js">if (true) {
  let myVar = "Hello World";
  console.log(myVar); // Outputs "Hello World"
}

console.log(myVar + '!'); // ReferenceError: myVar is not defined</code></pre>
<p>Notice how when we change the var in the code before to let when declaring myVar it continues to output "Hello World", but when it tries to call the variable outside of the if function, it gives us a ReferenceError. </p>
<p>This block-scoping behavior of <code>let</code> variables can make your code easier to read and understand, because you can clearly see the boundaries within which a <code>let</code> variable can be accessed. It can also prevent errors caused by accidentally referencing a variable from outside of its intended scope.</p>
<p>Another advantage of <code>let</code> variables is that they are not <strong>hoisted</strong> to the top of the current scope like <code>var</code> variables are. This means that you must declare a <code>let</code> variable before you can reference it in your code, which can help prevent accidental referencing of uninitialized variables.</p>
<p>Additionally, <code>let</code> variables are <strong>re-assignable</strong>, which means that you can change their value after they are declared. This is in contrast to <code>const</code> variables, which are <strong>immutable</strong> and cannot be re-assigned once they are declared. This makes <code>let</code> variables more flexible than <code>const</code> variables in certain situations.</p>
<p>In summary, the benefits of using <code>let</code> instead of <code>var</code> in JavaScript include block-scoping, lack of hoisting, re-assignability, and improved readability and maintainability of your code.</p>
<h4><code>const</code></h4>
<p>The <code>const</code> keyword is also a new addition to JavaScript, and it was introduced in the same version as <code>let</code>. <code>const</code> variables are similar to <code>let</code> variables in that they are block-scoped, but there is one key difference: <code>const</code> variables are <strong>immutable</strong>, which means that their value cannot be changed once they are assigned.</p>
<p>For example:</p>
<pre class="line-numbers"><code class="language-js">const myVar = "Hello World";
myVar = "Goodbye World"; // TypeError: Assignment to constant variable
</code></pre>
<p>he code above, the <code>myVar</code> variable is declared using the <code>const</code> keyword and assigned the value <code>"Hello World"</code>. If you try to reassign a new value to <code>myVar</code>, you will get a <code>TypeError</code> because <code>const</code> variables are immutable.</p>
<h4>Conclusion</h4>
<p>In summary, the key differences between <code>const</code>, <code>let</code>, and <code>var</code> are as follows:</p>
<ul>
<li><code>var</code> variables are function- or global-scoped and are hoisted to the top of the current scope.</li>
<li><code>let</code> variables are block-scoped and are not hoisted.</li>
<li><code>const</code> variables are block-scoped, are not hoisted, and are immutable.</li>
</ul>
<p><a href="https://justudios.com/javascript-tutorial-4-a-simple-calculator.html" title="Building A Simple Calculator With JavaScript">Next Lesson: JavaScript Tutorial #4 - Simple Calculator</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>JavaScript Tutorial #2 - Output</title>
        <author>
            <name>Haeglo</name>
        </author>
        <link href="https://justudios.com/javascript-tutorial-2-output.html"/>
        <id>https://justudios.com/javascript-tutorial-2-output.html</id>
        <media:content url="https://justudios.com/media/posts/11/javascript-code-header.jpg" medium="image" />
            <category term="Javascript"/>
            <category term="JavaScript Tutorials"/>

        <updated>2022-12-07T15:52:49-06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://justudios.com/media/posts/11/javascript-code-header.jpg" alt="" />
                    What We Cover Logging out data to view in your console with a console.log() Writing data to an HTML document using document.write() Changing the contents of an HTML element using innerHTML Showing an Alert box using window.alert() Console.log() the console.log function is a very useful tool&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://justudios.com/media/posts/11/javascript-code-header.jpg" class="type:primaryImage" alt="" /></p>
                <h3>What We Cover</h3>
<ol>
<li><a href="#consolelog">Logging out data to view in your console with a <code>console.log()</code></a></li>
<li><a href="#documentwrite">Writing data to an HTML document using <code>document.write()</code></a></li>
<li><a href="#innerhtml">Changing the contents of an HTML element using <code>innerHTML</code></a></li>
<li><a href="#windowalert">Showing an Alert box using <code>window.alert()</code></a></li>
</ol>
<h3 id="consolelog">Console.log()</h3>
<p>the <code>console.log</code> function is a very useful tool for printing messages to the console in JavaScript. It can be used to print out any value or expression, including strings, numbers, booleans, and objects. Here's how to use it:</p>
<ol>
<li>
<p>Open the JavaScript console in your browser. In most browsers, you can do this by pressing <code>F12</code> on your keyboard, or by right-clicking on the page and selecting "Inspect" from the context menu. If you are using Codepen, click the Console tab at the bottom of the screen.</p>
</li>
<li>
<p>In your JavaScript code, use the <code>console.log</code> function to print out the value or expression you want to see in the console. There's an example below.</p>
</li>
<li>When you run your code, the message "Hello, world!" should appear in the console.</li>
</ol>
<pre class="line-numbers"><code class="language-js">console.log("Hello, world!");</code></pre>
<p>The <code>console.log</code> function is very useful for debugging your code, as it allows you to see what's happening at different points in your program. You can use it to print out the values of variables, the results of expressions, and more, to help you understand how your code is working.</p>
<p>Below are a few more examples of how to use the <code>console.log</code> function. Don't worry about understanding the code just yet, we'll go through that in later tutorials.</p>
<ul>
<li>Log the value of a variable:</li>
</ul>
<pre class="line-numbers"><code class="language-js">let name = "Alice";
console.log(name); // prints "Alice"</code></pre>
<ul>
<li>Log the result of an expression:</li>
</ul>
<pre class="line-numbers"><code class="language-js">let x = 10;
let y = 20;
console.log(x + y); // prints 30</code></pre>
<ul>
<li>Log the value of an object property:</li>
</ul>
<pre class="line-numbers"><code class="language-js">let person = {
  name: "Bob",  
  age: 30};
console.log(person.name); // prints "Bob"</code></pre>
<h3 id="documentwrite">document.write()</h3>
<p>The <code>document.write</code> function is a way to write content to an HTML document using JavaScript. It can be used to insert text, HTML elements, or other content into the page at the current location of the script. Here's how to use it:</p>
<ol>
<li>
<p>In your JavaScript code, use the <code>document.write</code> function to write the content you want to add to the page.</p>
</li>
<li>
<p>When you run your code, the message "Hello, world!" should be added to the page at the location where the script is executed.</p>
</li>
</ol>
<pre class="line-numbers"><code class="language-js">document.write("Hello, world!");</code></pre>
<p class="msg msg--info">It's important to note that the <code>document.write</code> function should only be used for testing or debugging purposes, as it can cause problems if used improperly. For example, if you use it after the page has already finished loading, it will overwrite the entire page, replacing all of the existing content with the new content you wrote.</p>
<p>It's generally better to use other methods to add content to a page using JavaScript, such as using the <code>innerHTML</code> property or creating elements using the <code>document.createElement</code> method. These methods are more versatile and less likely to cause problems. Let me know if you have any other questions.</p>
<h3 id="innerhtml">innerHTML</h3>
<p>The <code>innerHTML</code> property is a way to access and modify the contents of an HTML element using JavaScript. It allows you to read and write the HTML content within an element, including any text, HTML tags, and other elements. Here's how to use it:</p>
<ol>
<li>
<p>In your JavaScript code, use the <code>document.getElementById</code> method to access the element you want to modify. This method takes the <code>id</code> attribute of the element as its argument, and returns a reference to the element. Here's an example:</p>
<ul>
<li>
<p>HTML</p>
<pre class="line-numbers"><code class="language-html">&lt;div id="app"&gt;Starting Data&lt;/div&gt;</code></pre>
</li>
<li>
<p>JavaScript</p>
<pre class="line-numbers"><code class="language-js">let myDiv = document.getElementById("app");</code></pre>
</li>
</ul>
</li>
<li>Once you have a reference to the element, you can use the <code>innerHTML</code> property to read or write the content of the element. To read the content, simply access the <code>innerHTML</code> property of the element. For example:
<pre class="line-numbers"><code class="language-js">let content = myDiv.innerHTML;<br>console.log(content); // logs out: Starting Data</code></pre>
</li>
<li>
<p>To write new content to the element, simply assign a new value to the <code>innerHTML</code> property. For example:</p>
<pre class="line-numbers"><code class="language-js">myDiv.innerHTML = "Hello, world!";</code></pre>
<p> This will replace the existing content of the element with the new content you wrote. You can also use this property to add new content to the existing content, by concatenating the new content with the existing content. For example:</p>
<pre class="line-numbers"><code class="language-js">myDiv.innerHTML += "&lt;p&gt;This is some more data.&lt;/p&gt;";</code></pre>
<p>Notice the <code>+=</code> instead of the equals sign. This will add a new <code>p</code> element to the end of the content of <code>myDiv</code>. instead of just replacing it.</p>
</li>
</ol>
<h3 id="windowalert">window.alert()</h3>
<p>The<code>window.alert</code> function is a way to display a message to the user in a pop-up window using JavaScript. It can be used to alert the user to important information, to confirm an action, or to prompt the user for input. Here's how to use it:</p>
<p class="msg msg--info">If you are using codepen it will update after every time you make a change and can fire this blocking alert box while you are working. So, the best thing to do is to comment out your code until you are ready to use it. <code>// window.alert("Hello, world!");</code> The <code>//</code> before your window.alert makes the code a comment and it won't fire. When you are ready to test, remove the <code>//</code> and your code will run.</p>
<ol>
<li>
<p>In your JavaScript code, use the <code>window.alert</code> function to display the message you want to show to the user. Here's an example<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">:</span></p>
<pre class="line-numbers"><code class="language-js">window.alert("Hello, world!");</code></pre>
</li>
<li>
<p>When you run your code, a small window should appear with the message "Hello, world!" in it. The window will have an "OK" button that the user can click to close it.</p>
</li>
</ol>
<p>The <code>window.alert</code> function is a very simple and easy way to display a message to the user, but it has some limitations. For example, it only allows you to display a single line of text, and it blocks the rest of the code from executing until the user clicks the "OK" button.</p>
<p>Here are a few more examples of how to use the <code>window.alert</code> function:</p>
<ul>
<li>
<p>Display a variable<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">:</span></p>
<pre class="line-numbers"><code class="language-js">let name = "Alice";<br>window.alert("Hello, " + name + "!");</code></pre>
</li>
<li>
<p>Display the result of an expression:</p>
<pre class="line-numbers"><code class="language-js">let x = 10;<br>let y = 20;<br>window.alert(x + y);</code></pre>
</li>
<li>
<p>Display a message and get user input:</p>
<pre class="line-numbers"><code class="language-js">let name = window.prompt("Please enter your name:");
window.alert("Hello, " + name + "!");</code></pre>
</li>
</ul>
<p>The <code>window.alert</code> function is a useful tool for displaying simple messages to the user, but it should be used sparingly, as it can be interruptive and annoying if overused.</p>
<p><a href="https://justudios.com/javascript-tutorial-3-variables.html" title="JavaScript Variables Tutorial">Next Lesson: JavaScript Tutorial #3 - Variables</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>JavaScript Tutorial #1 - Intro To Javascript</title>
        <author>
            <name>Haeglo</name>
        </author>
        <link href="https://justudios.com/javascript-tutorial-1.html"/>
        <id>https://justudios.com/javascript-tutorial-1.html</id>
        <media:content url="https://justudios.com/media/posts/10/javascript-code-header.jpg" medium="image" />
            <category term="Javascript"/>
            <category term="JavaScript Tutorials"/>

        <updated>2022-12-07T15:52:55-06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://justudios.com/media/posts/10/javascript-code-header.jpg" alt="" />
                    JavaScript is a powerful programming language that allows you to add dynamic and interactive elements to your website. In this tutorial, we will focus on how to use JavaScript to create outputs, such as text and graphics, on your web page. A quick way to&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://justudios.com/media/posts/10/javascript-code-header.jpg" class="type:primaryImage" alt="" /></p>
                <div class="line-numbers">
<p>JavaScript is a powerful programming language that allows you to add dynamic and interactive elements to your website. In this tutorial, we will focus on how to use JavaScript to create outputs, such as text and graphics, on your web page.</p>
<p>A quick way to get started is to use a site called<a href="https://codepen.io/" target="_blank" rel="nofollow noopener noreferrer"> </a><a href="https://codepen.io/"></a><a href="https://codepen.io/">codepen.io</a><a href="https://codepen.io/"></a>. Here you will have different sections to write both HTML and Javscript code.</p>
<p>To create an output with JavaScript, you first need to have a web page set up with the necessary HTML and CSS elements. Then, you can use the <code>document.write()</code> function to add output to your web page.</p>
<p>For example, to create a simple text output, you can use the following code:</p>
<h4>JavaScript</h4>
<pre class="line-numbers"><code class="language-js">document.write("Hello, world!");</code></pre>
<p>This will output the text "Hello, world!" on your web page.</p>
<p>You can also use the <code>document.write()</code> function to create more complex outputs, such as tables and graphics. For example, to create a table with three rows and two columns, you can use the following code:</p>
<h4>JavaScript</h4>
<pre class="line-numbers"><code class="language-js language-html">var  tableData = `&lt;table border="1" cellpadding="15"&gt;
    &lt;tr&gt;&lt;td&gt;Row 1, Column 1&lt;/td&gt;&lt;td&gt;Row 1, Column 2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Row 2, Column 1&lt;/td&gt;&lt;td&gt;Row 2, Column 2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Row 3, Column 1&lt;/td&gt;&lt;td&gt;Row 3, Column 2&lt;/td&gt;&lt;/tr&gt;
    &lt;/table&gt;`;
document.write(tableData);</code></pre>
<h4>Output</h4>
<table border="1" cellpadding="15">
<tbody>
<tr>
<td>Row 1, Column 1</td>
<td>Row 1, Column 2</td>
</tr>
<tr>
<td>Row 2, Column 1</td>
<td>Row 2, Column 2</td>
</tr>
<tr>
<td>Row 3, Column 1</td>
<td>Row 3, Column 2</td>
</tr>
</tbody>
</table>
<p>This will create a table on your web page with the specified text in each cell.</p>
<p>In addition to the <code>document.write()</code> function, you can also use other JavaScript functions and libraries, such as the <code>console.log()</code> function and the Canvas API, to create outputs on your web page.</p>
<p>Let's create a simple graphic using the Canvas API. We need an HTML Canvas element to start drawing on. You can either write that into your HTML code or use a <code>document.write()</code> function as we did below. You can use the following code:</p>
<h4>JavaScript</h4>
<pre class="line-numbers"><code class="language-js language-html">document.write("&lt;canvas id='myCanvas'&gt;&lt;/div&gt;");
var canvas = document.getElementById("myCanvas");
var ctx = canvas.getContext("2d");
ctx.fillStyle = "red";
ctx.fillRect(20, 20, 150, 100);</code></pre>
<h4>Output</h4>
<figure class="post__image"><img loading="lazy"  src="https://justudios.com/media/posts/10/javascript-tutorial-1-red-rectangle.png" alt="" width="202" height="160" sizes="100vw" srcset="https://justudios.com/media/posts/10/responsive/javascript-tutorial-1-red-rectangle-xs.png 300w ,https://justudios.com/media/posts/10/responsive/javascript-tutorial-1-red-rectangle-sm.png 480w ,https://justudios.com/media/posts/10/responsive/javascript-tutorial-1-red-rectangle-md.png 768w ,https://justudios.com/media/posts/10/responsive/javascript-tutorial-1-red-rectangle-lg.png 1024w ,https://justudios.com/media/posts/10/responsive/javascript-tutorial-1-red-rectangle-xl.png 1360w ,https://justudios.com/media/posts/10/responsive/javascript-tutorial-1-red-rectangle-2xl.png 1600w"></figure>
<p>This code will create a red rectangle on your web page using the Canvas API.</p>
<p>In conclusion, JavaScript allows you to create a wide range of outputs on your web page, including text, tables, and graphics. By using the <code>document.write()</code><strong> </strong>function and other JavaScript functions and libraries, you can add dynamic and interactive elements to your website.  We'll go into more detail in the next tutorials, this was mostly just to get a quick glimpse at the JavaScript language.</p>
<p><a href="https://justudios.com/javascript-tutorial-2-output.html" title="JavaScript Tutorial #2 - Output">Next Lesson: JavaScript Tutorial #2 - Output</a></p>
</div>
            ]]>
        </content>
    </entry>
</feed>
